

TACPPD Developer Guide

                         <Graphics file: C:/!tacppd/tacppd.org.jpg>


(c) Copyright in 2001-2006 by

Roman Volkov and Brett Maxfield

1 Contacts

See tacppd home site http://tacppd.org. For comments, 
issues and feature requests you can use phorum or 
mailing list on tacppd project page at SourceForge 
(http://sourceforge.net/projects/tacppd). For other 
information you can contact directly with Roman Volkov, 
rv@tacppd.org. For some extra information and services, 
commercial support and commercial developing contact 
with http://tacppd.com.

2 COPYRIGHT info

The tacppd (tacacs++ server daemon) software is 
Copyright (C) 1998-2005 by Roman Volkov and tacppd 
team. You may use, distribute and copy the tacppd 
software under the terms of GNU General Public License 
version 2. See COPYING file in tacppd distribution for 
text of GNU GPL. You should have received a copy of the 
GNU General Public License along with this program; if 
not, write to the Free Software Foundation, Inc., 59 
Temple Place, Suite 330, Boston, MA 02111-1307 USA. 
This product includes software developed by Eric Young. 
This product includes software developed by Alec 
Peterson. It uses RSA Data Security, Inc. MD5 
Message-Digest Algorithm. Also some copyright 
information for other parts available inside source 
code (NET-SNMP library code).

3 SUPPORT info

This product has community support, available via 
http://tacppd.org resources: mailing list, phorum, 
bugtracking and feature requests system from 
SourceForge's tacppd page 
(http://sourceforge.net/progects/tacppd). You should 
know, that support will be provided only when community 
people will have free time and possibilities to do it, 
so please, don't require a lot. For information about 
commercial support visit http://tacppd.com, but you 
should know, that support will not be provided under 
any circumstances for this program by tacppd.com, it's 
employees, volunteers or directors, unless a commercial 
support agreement and/or explicit prior written consent 
has been given.

4 Introduction

Tacppd APIs, internal structures, programming style, 
project goals and methods.

5 Writing documentation

For documentation writing we use LyX 
(http://www.lyx.org). The LyX files are the source for 
both TEX and HTML. If you wish to contribute toward the 
documentation, please do not edit changes directly in 
the .lyx file but send your changes to me for merging. 
It is much easier if you create a separate .lyx file 
for your documentation, and for one of the maintainers 
can then merge it into the documentation.

On a daily basis i will generate TEX and HTML files. 
The new HTML documents will be available on the web 
site shortly after. For program code examples please 
use the "LyX-code" style.

6 Developing environment

We are currently using KDevelop. The KDevelop project 
file available in distribution. The main platform - Linux.

7 Programming style

The main goal is to improve readability of code and 
thereby the understanding, maintainability and general 
quality of the code. It is impossible to cover all the 
specific cases as a general guide and the programmer 
should be flexible and consoder that other people have 
to decypher the code they write.

7.1 C++

7.1.1 Comments

7.1.2 Naming conventions

* Names representing types must be in mixed case, 
  starting with upper case.

  Example:

Line, SavingsAccount

  Reason: Common practice in the C++ development community.

* Variable names must be in mixed case starting with 
  lower case.

  Example:

line, savingsAccount

  Reason: Common practice in the C++ development community.

* Named constants (including enumeration values) must 
  be all uppercase using underscore to separate words.

  Example:

MAX_ITERATIONS, COLOR_RED, PI

  Reason: Common practice in the C++ development community

* Names representing methods or functions must be verbs 
  and written in mixed case starting with lower case.

  Example:

getName(), computeTotalWidth()

  Reason: Common practice in the C++ development community.

* Names representing namespaces should be all lowercase.

  Example:

analyzer, iomanager, mainwindow

  Reason: Common practice in the C++ development community.

* Names representing template types should be a single 
  uppercase letter.

  Example:

template<class T> ... template<class C, class D> ... 

  Reason: Common practice in the C++ development community.

* All names should be written in english.

  Example:

fileName; // NOT: filNavn 

  Reason: English is the prefered language for 
  international development.

* Abbreviations and acronyms must not be uppercase when 
  used as name

  Example:

exportHtmlSource(); // NOT: exportHTMLSource();

  Reason: When the name is connected to another, the 
  readbility is seriously reduced; the word following 
  the abbreviation does not stand out as it should.

* Global variables should always be referred to using 
  the :: operator.

  Example:

::mainWindow.open(), ::applicationContext.getName()

  Reason: For doing global variables separated from other.

* Private class variables should have underscore suffix.

  Example:

class SomeClass {

 private: 

  int length_;

 public:

};

  Reason: This is important because class variables are 
  considered to have higher significance than method 
  variables, and should be treated with special care by 
  the programmer.

* Variables with a large scope should have long names, 
  variables with a small scope can have short names

  Example:

i, j, k, ::objectForAllProject;

  Reason: Scratch variables used for temporary storage 
  or indices are best kept short

* The name of the object is implicit, and should be 
  avoided in a method name. 

  Example:

line.getLength(); // NOT: line.getLineLength();

  Reason: The latter seems natural in the class 
  declaration, but proves superfluous in use, as shown 
  in the example. 

7.1.3 TABs and spaces

Special characters like TAB and page break must be 
avoided. (These characters are bound to cause problem 
for editors, printers, terminal emulators or debuggers 
when used in a multi-programmer, multi-platform environment.)

7.1.4 Include files and include statements

* Header files must include a construction that 
  prevents multiple inclusion. The convention is an all 
  uppercase construction of the file name with _ 
  seperator and the h suffix with __ before and after.

  Example: for file CoreBundle.h

#ifndef __CORE_BUNDLE_H__

#define __CORE_BUNDLE_H__

 ...

<code>

 ...

#endif //__CORE_BUNDLE_H__

* Include statements must be located at the top of a 
  file only.

7.1.5 use spaces in type definitions

Use only one space in type definition:

int intValue;

char charValue;

int intVal1,intVal2;

Use one space before "*" in pointer definition:

char *strType;

int *aaa;

void

methodName(int a,char *aaa,int *bbb) {}

7.1.6 if() rule

The space after last ")" before "{", spaces around 
condition, no space after "if":

if(aaa > bbb) {

   ...

  <code>

   ...

}

If use united conditions (with "&&" and/or "||"), than no 
spaces around condition:

if(aaa>bbb && ccc<ddd) {

   ...

  <code>

   ...

}

7.1.7 switch/case

No space before first "(", one space after ")" before "{", "case"
 moved for one space, code moved usually - 2 spaces. 
Comments about "case" in one line with it.

switch(statement) {

 case 1:  // case comment

    ...

   <code>

    ...

   break;

 case 2:  // case comment

    ...

   <code>

    ...

   break;

 default:  // default comment

    ...

   <code>

    ...

   break;

}

7.1.8 method

Method return value in separate line, no space after 
method name before "(", no space after "," in method 
arguments, space after ")" and before "{", "{" in one line 
with method name and arguments:

void

CoreClass::methodX(int input,char *str) {

   ...

  <code>

   ...

}

8 TACPPD operation

The intent of tacppd operation is - use some OO model 
for provide universal access to TCP/UDP server, 
database engine, configuration engine, logging engine.

9 Internals

10 Data structures

As core of the project we use Core* obgects. It has all 
tacppd configuration inside.

11 Logging/Debug system

In main.cc during tacppd start you can see creation of 
next object: logTermSystem, logSyslogSystem, logSystem.

11.1 log/debug facilities

There are several log/debug facilities available (the 
latest list you can see in sources Debug.cc/Debug.h):

// Debug Facilities 1-250

#define LOG_TACACS     1               // tacacs+ 
protocol events

#define LOG_BILLING    2               // billing subsytem

#define LOG_AAA        3               // AAA

#define LOG_DB         4               // database 
system activity

#define LOG_SNMP       5               // snmp system activity

#define LOG_NETFLOW    6               // netflow collector

#define LOG_SERVER     7               // tcp/udp server

#define LOG_CC         8               // cryptocard

#define LOG_POOL       9               // address pool system

#define LOG_TRACK      10              // user track system

#define LOG_HTTP       11              // http interface

#define LOG_TIP        12              // bundle protocol

#define LOG_TEP        13              // external protocol

Also there are several internal facilities for output 
to logfiles (defined in Logging.h file):

// log critical error messages

#define LOG_ERROR                 0

// log NetFlow

#define LOG_NETFLOWLOG            252

// log events

#define LOG_EVENT                 253

// log informational

#define LOG_INFORM                254

// log logging information to other file

#define LOG_LOGGING               255

11.2 logTermSystem

During new terminal session creation, you should 
register socket descriptor of this session with this 
system by use call:

::logTermSystem->add(<socket handler>);

It means, that logging system will have information for 
output to terminal. Also when you close terminal 
session, do not forget call:

::logTermSystem->del(<socket handler>);

This system periodic checks list of messages and if any 
created entry require present facility, than it send 
this string to socket. To require any facility you can 
use call:

::logTermSystem->add_debug_fc(<socket 
handler>,<facility number>);

For close output of special facility use:

::logTermSystem->del_debug_fc(<socket 
handler>,<facility number>);

12 Database API

The database system API was created for provide 
possible universal access to any database engine of 
data file. It has loadable modules-drivers, which 
should provide low-level access. All database 
structures uses tacppd point of view. It means, that we 
have some fixed set of types which can be not supported 
by database engine, but database support module must 
accept this types and convert it and data to database 
appropriate form. 

12.1 Database version 1

The version 1 of tacppd database currently only version.

12.1.1 users data

  Name: tacpp_v1_usr

user name (username) - string

password (password) - string

open date (dopen) - datatime

close date (dclose) - datatime

authorization group (avpid) - string

access group (accid) - string

resource group (bilid) - string

additional data group (addid) - string

max sessions (maxsess) - integer

This is information for authentication. Store username, 
password, open/close date and time, several groups 
membership (access group, authorization group, 
additional user data group), maximum allowed sessions. 
If database key not equal word "none", than field 
password crypted. It crypted with use md5 and than 
stored in base64.

EXAMPLE:

- lets create user "ppprv" with password "test", 
authorization group "ppp-1", access group "ppp-acc", no 
resource group and maximum 1 session available.

username=ppprv

password=test

avpid=ppp-1

accid=ppp-acc

bilid=

maxsess=1

12.1.2 additions to users data

  Name: tacpp_v1_add

additional data group

authentication source

enable access password

12.1.3 user access rights

  Name: tacpp_v1_acc

access group name (accid)

access by phone

from specifyed NAS

from specifyed port

restricted access time



12.1.4 authorization information

  Name: tacpp_v1_avp

author group id

service

protocol

attribute=vlue pair

12.1.5 per-command access authorization

  Name: tacpp_v1_cmd

author group id (avpid)

permitted commands

denied commands

permitted arguments

denied arguments

12.1.6 resource module data

  Name: tacpp_v1_res

12.1.7 resource module resources information

  Name: tacpp_v1_resdata

12.1.8 resource changes log

  Name: tacpp_v1_reslog

12.2 Database structure definition in tacppd database API

In files TacDb.cc and TacDb.h++

TacDb.h++: in class TacDb in provate section you can 
find or add database table descriptor as: DbTable 
*table_name_var;

TacDb.cc: in constructor you should add: table_name_var 
= new DbTable("table_name","table description"); and 
also add table fields: 

table_name_var->add("field_name","field 
description",FIELD_TYPE); where FIELD_TYPE = STR_TYPE - 
char(), varchar() - string 

for this type you should add field size:


table_name_var->add("field_str","description",STR_TYPE,32); 

UINT_TYPE - unsigned int 

INT_TYPE - ordinary int (remember, usually in SQL 
databases no signed int type, and this will unsigned too)

FLOAT_TYPE - float

DATE_TYPE - datetime or similar 

BOOL_TYPE - boolean

13 Database module

Database modules system was created for provide acceess 
to any database engine. Any module have to be linked 
with database library. We have untested feature for 
reload one type database module to other during 
operation, also for change module version or for change 
database library version without tacppd restart.

14 SNMP module

Snmp modules system was created for provide easy 
implementation snmp operation with any snmp-capable 
device. We use snmp operation with net-snmp library 
(www.net-snmp.org). The snmp low-level code situated 
inside tacppd core. The modules are only interpret results.

15 Resource module

This is one method for implement resource control system.

16 XML-RPC

16.1 XML-RPC server side implementation

16.2 XML-RPC client side implementation

16.2.1 C/C++

16.2.2 Perl

16.2.3 Java

17 Debugging

17.1 memory leaks

For memory operation debug we will use Valgrind 
(http://developer.kde.org/~sewardj/) - an open-source 
memory debugger for x86-GNU/Linux.

18 Testing

Some TACACS+ testing tools available with libtacplus 
library http://sf.net/projects/libtacplus in samples 
directory (tacacs+ client, etc)
